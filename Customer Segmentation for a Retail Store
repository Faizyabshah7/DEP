import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Load the dataset
file_path = r"C:\Users\A.H\OneDrive\Desktop\RetailData.csv"
retail = pd.read_csv(file_path, sep=',', encoding="ISO-8859-1", header=0)

# Convert InvoiceDate to datetime
retail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'], format="%d-%m-%Y %H:%M")

# Display the first few rows
print(retail.head())

# Check the shape of the dataset
print("Shape of the dataset:", retail.shape)

# Summary statistics
print(retail.describe())

# Check for missing values
print("Missing values:\n", retail.isnull().sum())

# Handling missing values (if any) by dropping rows with any missing values
retail_cleaned = retail.dropna()

# Check the shape of the cleaned dataset
print("Shape of the cleaned dataset:", retail_cleaned.shape)

# Select relevant features for clustering
features = ['Quantity', 'UnitPrice']  # Example features, adjust as needed
X = retail_cleaned[features]

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Applying K-means Clustering
# Determine the optimal number of clusters using the elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS (Within-Cluster Sum of Squares)')
plt.show()

# From the elbow plot, let's choose an optimal number of clusters, say 3
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
kmeans.fit(X_scaled)

# Add the cluster labels to the dataset
retail_cleaned['Cluster'] = kmeans.labels_

# Visualizing Clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=retail_cleaned, x='Quantity', y='UnitPrice', hue='Cluster', palette='viridis')
plt.title('Clusters of Customers')
plt.xlabel('Quantity')
plt.ylabel('UnitPrice')
plt.legend()
plt.show()
